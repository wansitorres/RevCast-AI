import os
import openai
import numpy as np
import pandas as pd
import faiss
import streamlit as st
import warnings
from openai.embeddings_utils import get_embedding
from langchain_community.embeddings import OpenAIEmbeddings  # Updated import
from streamlit_option_menu import option_menu  # Ensure this import is present
from PIL import Image
import matplotlib.pyplot as plt

warnings.filterwarnings("ignore")

st.set_page_config(page_title="RevCast AI", layout="wide")
System_Prompt_Forecast = """
Role:
You are RevCast AI, an AI-based Revenue Forecasting Model designed to generate predictions of future sales based on historical data. Your primary function is to produce accurate, data-driven forecasts to aid users in strategic planning.

Instructions:

Accept a list of historical sales data as input, consisting of numerical values representing revenue for past periods.
Analyze the provided historical data to identify trends, seasonality, and patterns.
Generate a revenue forecast for the next 12 periods using appropriate statistical or machine learning models.
Output the forecasted values as a comma-separated string for easy parsing.
Ensure your forecast takes into account both short-term trends and long-term patterns to improve accuracy.
Maintain clarity and conciseness in your output, focusing only on the forecasted values without extraneous information.

Context:
The user will input a series of numerical values representing revenue over a sequence of past periods (e.g., monthly sales data for the past two years). Your task is to predict the revenue for the next 12 periods based on this historical data. The user will leverage your forecast for financial planning, budgeting, or inventory management.

Constraints:

Do not assume any additional data beyond what the user provides (e.g., macroeconomic factors or market conditions).
The forecasted output should be limited to 12 values, representing the next 12 periods.

Examples:

Input: [1200, 1350, 1500, 1450, 1600, 1700, 1550, 1650, 1800, 1750, 1900, 1850]
Output: 1900, 1950, 2000, 2100, 2050, 2150, 2200, 2250, 2300, 2400, 2350, 2450

Input: [100, 200, 300, 250, 350, 400, 450, 500, 550, 600, 650, 700]
Output: 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300
"""
System_Prompt_Explanation = """
You are RevCast AI, AI-based Revenue Forecast Explanation Model designed to provide clear, insightful interpretations of the forecasted values generated by the forecasting model. Your primary function is to explain the forecast results in a way that helps users understand and act upon the information.

Instructions:

Analyze the forecasted revenue values and identify significant trends, such as growth patterns, seasonality, or unexpected fluctuations.
Interpret what the forecasted values imply about future business performance, focusing on areas like sales growth, potential slowdowns, or cyclical changes.
Highlight any peaks, troughs, or irregularities that might require the user's attention.
Offer actionable insights or recommendations based on the forecasted data (e.g., adjusting inventory levels, planning marketing campaigns, or reallocating resources).
Ensure explanations are clear, concise, and tailored to the user‚Äôs needs, focusing on helping them make strategic decisions.

Context:
The forecasted revenue data you receive will be based on historical sales trends provided by the user. The user is typically interested in understanding the forecasted outcomes to make informed business decisions, optimize resource allocation, and plan for the future. Your explanations will guide the user in interpreting the forecast‚Äôs implications.

Constraints:

Do not re-run or modify the forecast calculations‚Äîfocus solely on interpreting the given data.
Avoid technical jargon; your explanations should be understandable to users with limited expertise in data analysis.
Ensure that your insights are actionable and relevant to business strategy rather than purely descriptive.

Examples:

Forecasted Values: 1200, 1250, 1300, 1350, 1400, 1450, 1500, 1550, 1600, 1650, 1700, 1750
Explanation:

The forecast shows a steady upward trend, suggesting consistent growth in revenue. This could indicate increased demand or successful sales strategies.
Consider increasing inventory or expanding marketing efforts to capitalize on this growth trend.
Forecasted Values: 800, 750, 700, 680, 670, 660, 650, 640, 630, 620, 610, 600
Explanation:

A declining trend is evident, which could signal a drop in market demand or increased competition. This suggests a need to review sales strategies or explore new revenue streams.
Immediate action may be required to prevent further declines, such as introducing promotional offers or improving product differentiation.
"""

# Sidebar for API key and options
with st.sidebar:
    st.header("Settings")
    api_key = st.text_input('Enter OpenAI API token:', type='password')
    
    # Check if the API key is valid
    if api_key and api_key.startswith('sk-'):  # Removed length check
        openai.api_key = api_key
        st.success('API key is valid. Proceed to enter your shipment details!', icon='üëâ')
    else:
        st.warning('Please enter a valid OpenAI API token!', icon='‚ö†Ô∏è')

    st.header("Instructions")
    st.write("1. Enter a valid OpenAI API Key.")
    st.write("2. Click RevCast AI on the Sidebar to get started!")
    st.write("3. Input your sales data.")
    st.write("4. Click 'Forecast Revenue' to see the predictions.")
    
    if st.button("Reset"):
        st.session_state.clear()  # Clear session state to reset the app

    options = option_menu(
        "Content",
        ["Home", "About Us", "RevCast AI"],
        default_index=0
    )

# Initialize session state for messages
if 'messages' not in st.session_state:
    st.session_state.messages = []

# Function to forecast revenue
def forecast_revenue(data, sales_column):
    # Prepare the input for the GPT model
    sales_data = data[sales_column].tolist()
    sales_data_str = ', '.join(map(str, sales_data))

    # RAG Implementation
    # Load and prepare data for RAG
    dataframed = pd.read_csv('https://raw.githubusercontent.com/wansitorres/RevCast-AI/refs/heads/main/RevCast_Data.csv')
    dataframed['combined'] = dataframed.apply(lambda row: ' '.join(row.values.astype(str)), axis=1)
    documents = dataframed['combined'].tolist()

    embeddings = [get_embedding(doc, engine="text-embedding-3-small") for doc in documents]
    embedding_dim = len(embeddings[0])
    embeddings_np = np.array(embeddings).astype('float32')

    index = faiss.IndexFlatL2(embedding_dim)
    index.add(embeddings_np)

    # Generate embedding for the sales data string
    query_embedding = get_embedding(sales_data_str, engine='text-embedding-3-small')
    query_embedding_np = np.array([query_embedding]).astype('float32')

    # Search for relevant documents
    _, indices = index.search(query_embedding_np, 2)
    retrieved_docs = [documents[i] for i in indices[0]]
    context = ' '.join(retrieved_docs)

    # Create a prompt for the GPT model, including the context
    prompt = f"""
    Given the following sales data: {sales_data_str}, and the context: {context}, forecast the next 12 periods of revenue. 
    Return only the forecasted values as a comma-separated string.
    """

    # Call the OpenAI API to generate the forecast
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        temperature=0.1,
        messages=[
            {"role": "system", "content": System_Prompt_Forecast},
            {"role": "user", "content": prompt}
        ]
    )

    # Extract the forecasted values from the response
    forecasted_values = response['choices'][0]['message']['content']
    
    # Convert the forecasted values to a list of floats
    try:
        forecasted_data = [float(value) for value in forecasted_values.split(',')]
    except ValueError as e:
        st.error("Error parsing forecasted values. Please check the API response.")
        print("Error:", e)
        return None

    # Return both forecasted data and context for insights
    return forecasted_data, context

# Function to generate explanation using OpenAI API
def generate_explanation(data, forecast):
    # Prepare the historical data for the prompt
    historical_data_str = data.to_string(index=False)  # Convert DataFrame to string for better readability
    forecast_str = ', '.join(map(str, forecast))  # Convert forecasted values to a string

    # Modify the prompt to focus on how the forecast was derived and analyze historical trends
    prompt = f"""
    {System_Prompt_Explanation}
    
    1. Analyze the historical revenue data provided below and identify key trends, fluctuations, and patterns:
    {historical_data_str}
    
    2. Based on the historical data, explain how the forecasted revenue values were derived: {forecast_str}.
    """

    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        temperature=0.3,
        messages=[
            {"role": "user", "content": prompt}
        ]
    )
    
    return response['choices'][0]['message']['content']

# Home Page
if options == "Home":
    st.title("Welcome to RevCast AI!")
    st.write("""
    Welcome to RevCast AI, an innovative application designed to empower businesses with data-driven revenue forecasting. In today's fast-paced market, understanding future sales trends is crucial for strategic planning, inventory management, and financial forecasting. RevCast AI leverages advanced artificial intelligence to provide accurate predictions based on historical sales data, helping businesses make informed decisions.
    """)

    st.subheader("üöÄ Features")
    st.write("""
    - **User-Friendly Interface**: Navigate effortlessly through the application with a clean and intuitive design.
    - **Revenue Forecasting**: Input your historical sales data, and let RevCast AI generate forecasts for the next 12 periods, giving you a clear view of potential future revenue.
    - **Insightful Explanations**: Not only does RevCast AI provide forecasts, but it also explains how these predictions were derived, analyzing historical trends and patterns to enhance your understanding.
    - **Contextual Analysis**: The application utilizes additional contextual data to enrich the forecasting process, ensuring that your predictions are informed by relevant market insights.
    - **Automated Visualizations**: Visualize your sales data and forecasts with engaging charts, making it easier to grasp trends and make strategic decisions.
    """)

    st.subheader("üåü Why RevCast AI?")
    st.write("""
    In an era where data is king, RevCast AI was created to bridge the gap between complex data analysis and actionable business insights. Whether you're a small business owner, a sales manager, or a financial analyst, having access to reliable forecasts can significantly impact your planning and strategy.

    RevCast AI aims to simplify the forecasting process, allowing users to focus on what matters most‚Äîgrowing their business. By transforming historical sales data into clear, actionable insights, RevCast AI empowers users to anticipate market changes and adapt their strategies accordingly.
    """)

# About Us Page
elif options == "About Us":
    st.title("About Us")
    My_image = Image.open("images/About Me.jpg")
    my_resized_image = My_image.resize((250,250))
    st.image(my_resized_image)
    st.write("I am Juan Cesar Torres and this project is made as part of my requirements in AI First Bootcamp by AI Republic.")
    st.write("I made this project to help business executives lead their business to success!")
    st.write("Feel free to reach out to me on LinkedIn and check out my other projects on GitHub!")
    st.write("https://www.linkedin.com/in/juan-cesar-torres-12b231260/")
    st.write("https://github.com/wansitorres")


# Forecast Page
elif options == "RevCast AI":
    st.title("RevCast AI")
    
    # Option for user to input data
    data_input_method = st.selectbox("How would you like to input your sales data?", ["Upload CSV", "Enter Data Manually"])

    if data_input_method == "Upload CSV":
        uploaded_file = st.file_uploader("Upload your sales data CSV", type="csv")
        if uploaded_file is not None:
            data = pd.read_csv(uploaded_file)
            st.write("Data Preview:", data.head())
            # Create a dropdown for selecting the column to forecast
            sales_column = st.selectbox("Select the column to forecast:", data.columns)
    else:
        # Manual data entry
        st.write("Enter your sales data below:")
        sales_data = st.text_area("Sales Data (comma-separated, e.g., 100, 150, 200)", "")
        if sales_data:
            sales_list = [float(x) for x in sales_data.split(",")]
            data = pd.DataFrame({'Sales': sales_list})
            sales_column = 'Sales'  # Set default sales column for manual entry

    if 'data' in locals() and 'sales_column' in locals():
        if st.button("Forecast Revenue"):
            forecast, context = forecast_revenue(data, sales_column)
            st.write("Forecasted Revenue:", forecast)

            explanation = generate_explanation(data, forecast)
            st.write("Explanation:", explanation)

            # Visualization
            plt.figure(figsize=(10, 5))
            plt.plot(data.index, data[sales_column], label='Sales Data', marker='o')

            # Create an index for the forecasted periods
            forecast_index = range(len(data), len(data) + len(forecast))
            plt.plot(forecast_index, forecast, color='r', linestyle='--', label='Forecasted Revenue')

            plt.title('Sales Data and Forecast')
            plt.xlabel('Time Period')
            plt.ylabel(sales_column)
            plt.legend()
            st.pyplot(plt)